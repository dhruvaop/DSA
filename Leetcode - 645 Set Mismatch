//CPP 

// Math Logic

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        vector<int>ans(2);

        int len = nums.size();
        vector<int>hash(len, 0);

        // Step 1 count the occurence
        for(int i=0; i<len; i++)
        {
            hash[nums[i]-1]++;

        }
        
        // step 2 find the occurrence 
        for(int i=0; i<len; i++)
        {
            if(hash[i]==0)
            {
                ans[1] = i+1;
            }

            if(hash[i]==2)
            {
                ans[0]=i+1;
            }
        }
        return ans;
    }
};
        
  


//XOR 

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        
        int xr = 0; 

        for (int i = 0; i < nums.size(); i++) {
            xr ^= nums[i]; 
            xr ^= (i + 1); 
        }

        int it = 0;

        
        while (1) {
            if (xr & (1 << it)) break;
            it++;
        }

        
        int first = 0;

        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] & (1 << it)) first ^= nums[i]; 
            int x = i + 1;
            if (x & (1 << it)) first ^= x; 
        }

        int second = xr ^ first; 

        bool flag = false;

        
        for (int& x : nums) {
            if (x == first) flag = true;
        }

        if (flag) {
            return {first, second}; 
        }

        return {second, first};
    }
};
